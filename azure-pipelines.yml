trigger:
- '*'

pr:
- '*'

pool:
  vmImage: 'ubuntu-latest'

jobs:
- job: BuildAndDeploy
  timeoutInMinutes: 20 # Increase timeout as needed

  steps:
  - checkout: self

  - script: |
      # Debugging step to print the artifact staging directory
      echo "Artifact Staging Directory: $(Build.ArtifactStagingDirectory)"

      # Create the Kubernetes manifest directory if it doesn't exist
      mkdir -p $(Build.ArtifactStagingDirectory)/kubernetes-manifest

      # Remove old Kubernetes manifest files (keep the latest 5)
      Get-ChildItem -Path $(Build.ArtifactStagingDirectory)/kubernetes-manifest -File | Sort-Object LastWriteTime -Descending | Select-Object -Skip 5 | Remove-Item -Force

      # Create a Kubernetes Secret for the ACR login information
      kubectl create secret docker-registry acr-secret \
        --docker-server=p4s101231.azurecr.io \
        --docker-username=p4s101231 \
        --docker-password=dbYXfujVc4QTvWzX4T0ShgQUp7PHNk08bDtkiMbJdC+ACRC6h3Q1

      # Generate the Kubernetes manifest files with a unique identifier based on the build number
      # Dev Manifest
      cat <<EOF > $(Build.ArtifactStagingDirectory)/kubernetes-manifest/dev-manifest-$(Build.BuildNumber).yaml
      apiVersion: apps/v1
      kind: Deployment
      metadata:
        name: my-app
        namespace: dev
      spec:
        replicas: 1
        selector:
          matchLabels:
            app: my-app
        template:
          metadata:
            labels:
              app: my-app
          spec:
            containers:
              - name: my-app
                image: p4s101231.azurecr.io/p4s-k8s-image:latest
                ports:
                  - containerPort: 8080
                env:
                  - name: ASPNETCORE_ENVIRONMENT
                    value: Production
                  - name: CONNECTION_STRING
                    value: "your_dev_database_connection_string"
            imagePullSecrets:
              - name: acr-secret
      ---
      apiVersion: v1
      kind: Service
      metadata:
        name: my-app-service
        namespace: dev
      spec:
        selector:
          app: my-app
        ports:
          - protocol: TCP
            port: 80
            targetPort: 8080
        type: LoadBalancer
      EOF

      # Other manifest files (test, prod) can be added similarly

    displayName: 'Create Kubernetes Manifests'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/kubernetes-manifest'
      artifact: 'kubernetes-manifest'

  - task: Docker@2
    displayName: 'Build and Push Docker Image'
    inputs:
      containerRegistry: 'DRconnect' # Replace with your Docker Registry service connection name
      repository: 'p4s-k8s-image'
      command: 'buildAndPush'
      Dockerfile: '**/Dockerfile'
      tags: |
        latest
        $(Build.BuildNumber)

  - task: Kubernetes@1
    displayName: 'Kubectl apply'
    inputs:
      connectionType: 'Kubernetes Service Connection'
      kubernetesServiceEndpoint: 'dev-aks-p4s' # Replace with your Kubernetes service connection
      namespace: 'dev'
      command: 'apply'
      arguments: '-f $(Build.ArtifactStagingDirectory)/kubernetes-manifest/dev-manifest-$(Build.BuildNumber).yaml'
