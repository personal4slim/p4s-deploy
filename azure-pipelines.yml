trigger:
- main  # Adjust the branch name as needed

pr:
- '*'

pool:
  vmImage: 'ubuntu-latest'

variables:
  # Define your Azure Container Registry (ACR) details
  acrName: 'p4s101231'  # Replace with your ACR name
  acrResourceGroup: 'p4s-ACR-rg'  # Replace with your ACR resource group name
  dockerfilePath: '01-Dockerfile'  # Path to your Dockerfile

  # Azure AD application details
  appId: '62ba6d2f-4192-4cf5-a00d-42328f7d7dfd'  # Application (client) ID
  objectId: 'e3cc12ae-4da8-4aa1-b0da-1bb9e4a682b5'  # Object ID
  tenantId: '104e77d4-81e7-4c16-ab44-935220bed6dd'  # Directory (tenant) ID
  subscriptionId: '606e824b-aaf7-4b4e-9057-b459f6a4436d'  # Subscription ID
  secretId: '7f7f47ce-e23b-4034-90da-0823fa454b18'  # Secret ID
  secretValue: 'nJP8Q~_EqLNHRP2WxOe.b1HjVrKytOXVprvW1ca9'  # Secret Value

jobs:
- job: BuildAndPushDockerImage
  displayName: 'Build and Push Docker Image'
  steps:
  - checkout: self

  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      installationPath: $(Agent.ToolsDirectory)/dotnet
      installationScript: 'install'

  - script: |
      # Build .NET application
      cd $(dockerfilePath)
      dotnet build
    displayName: 'Build .NET Application'

  - script: |
      # Authenticate with Azure Container Registry (ACR)
      az acr login --name $(acrName) --resource-group $(acrResourceGroup)

      # Build and push Docker image to ACR
      docker build -t $(acrName).azurecr.io/your-app-name:$(Build.BuildId) -f $(dockerfilePath) .
      docker push $(acrName).azurecr.io/your-app-name:$(Build.BuildId)

      # Set Azure AD application details as environment variables
      export AZURE_CLIENT_ID=$appId
      export AZURE_TENANT_ID=$tenantId
      export AZURE_CLIENT_SECRET=$secretValue
    displayName: 'Build and Push Docker Image'
